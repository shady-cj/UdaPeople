version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend:
        type: string
      backend: 
        type: string
      bucket_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "arn:aws:s3:::udapeople-<< parameters.bucket_id>>" --recursive
            aws cloudformation delete-stack --stack-name << parameters.frontend >>
            aws cloudformation delete-stack --stack-name << parameters.backend >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: frontend testing
          command: |
            cd frontend
            npm install
            npm run test
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            -  backend-build
      - run: 
          name: backend testing
          command: |
            cd backend
            npm install
            npm run test
  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: running audits on frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: running audits on backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing tar and gzip utility
          command: yum install gzip tar -y
      - run:
          name: deploy backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Getting the ec2 instance ip
          command: |
            aws --region us-east-1 ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
       
      - persist_to_workspace:
          root: ./
          paths:
            - ./.circleci/ansible/inventory.txt
      - destroy-environment:
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          #- slack/notify: 
          #event: fail
          #template: basic_fail_1
          # - slack/notify:
          #event: pass
          #template: success_tagged_deploy_1
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.16

    steps:
      - checkout
      - attach_workspace:
          at: ./
      - add_ssh_keys:
          fingerprints: ["93:81:a0:52:33:d7:30:72:d5:e6:6b:4a:3c:6f:eb:aa"]
      - run:
          name: install ansible and other dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: execute ansible playbook
          command: |
            cd ./.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io or memstash.io
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
                  curl https://kvdb.io/Pu1GBvPYKAkwEbveutmNYw/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             fi

  deploy_frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install node and npm
          command:  apk add --update nodejs npm
      - run: 
          name: Install  ansible and awscli
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run: 
          name: deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
             
      - destroy-environment: 
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"                    
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy_backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:                                                                 
          fingerprints: ["93:81:a0:52:33:d7:30:72:d5:e6:6b:4a:3c:6f:eb:aa"]
      - attach_workspace:
          at: ./
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            pip install awscli
      - run:
          name: deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..

            tar -czvf artifact.tar.gz backend
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:                                                          
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"                    
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
          bucket_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke_test:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run: 
          name: Install dependencies
          command: |
            pip install aws-cli
            apk add --update nodejs npm
            apk add --update curl
      - run:
          name: Run smoke tests for backend
          command: |
            export BACKEND_API="http://$(tail -n 1./.circleci/ansible/inventory.txt):3030"
            echo $BACKEND_API
            if curl "${BACKEND_API}/api/status" | grep -i "ok"
            then
              return 0
            else
              return 1
            fi
      - run: 
          name: Run smoke tests for frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep -i "Welcome"
            then
              return 1
            else
              return 1
            fi
workflows:
  Main-Workflow:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy_infrastructure:
        #context: slack-secrets
          requires: [scan_frontend, scan_backend, test_frontend, test_backend]
      - configure_infrastructure:
          requires:
            - deploy_infrastructure
              #- run_migrations:
              # requires:
              #- configure_infrastructure
      - deploy_frontend:
          requires:
            # - run_migrations
            - configure_infrastructure
      - deploy_backend:
          requires:
            - configure_infrastructure


      - smoke_test:
          requires:
            - deploy_frontend
            - deploy_backend

