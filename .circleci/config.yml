version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend:
        type: string
      backend: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.frontend >>
            aws cloudformation delete-stack --stack-name << parameters.backend >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: frontend testing
          command: |
            cd frontend
            npm install
            npm run test
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            -  backend-build
      - run: 
          name: backend testing
          command: |
            cd backend
            npm install
            npm run test
  scan_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: running audits on frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: running audits on backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing tar and gzip utility
          command: yum install gzip tar -y
      - run:
          name: deploy backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            --tags project=udapeople
      - run:
          name: Getting the ec2 instance ip
          command: |
            aws --region us-east-1 ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text >> .circleci/ansible/inventory.txt
      - slack/notify: 
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 
      - persist_to_workspace:
          root: ~/
          paths:
            - ~/.circleci/ansible/inventory.txt
      - destroy-environment:
          frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  Main-Workflow:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy_infrastructure:
          context: slack-secrets
          requires: [scan_frontend, scan_backend, test_frontend, test_backend]
